// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = "postgresql://admin:admin123@localhost:5432/virtual_manager"
}

generator client {
  provider = "prisma-client-js"
}

model Company {
  id               String   @id @default(uuid())
  name             String
  registrationDate DateTime @default(now())
  headOfCompanyId  String?  @unique
  employees        Employee[]
  projects   Project[]

  @@index([name])
}

model Project {
  id           String             @id @default(uuid())
  name         String
  description  String?
  deadline     DateTime
  status       ProjectStatus
  companyId    String
  company      Company            @relation(fields: [companyId], references: [id])
  assignments  ProjectAssignment[]
  techStack    Json               // JSONB array of technologies
  tasks        Task[]

  @@index([name])
}

model Employee {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  team         String
  domain       String
  skills       Json    // JSONB to store an array of skills
  role         Role
  companyId    String
  experience   Int
  company      Company @relation(fields: [companyId], references: [id])
  assignments  ProjectAssignment[]
  tasks        Task[]
  users    User[]  

  @@index([email])
}



model ProjectAssignment {
  id           String @id @default(uuid())
  projectId    String
  employeeId   String
  roleInProject String
  assignedTasks Json // JSONB for storing task details
  employee     Employee @relation(fields: [employeeId], references: [id])
  project      Project  @relation(fields: [projectId], references: [id])
}

model Task {
  id           String       @id @default(uuid())
  projectId    String
  employeeId   String
  name         String
  description  String?
  status       TaskStatus
  startDate    DateTime
  endDate      DateTime
  progress     Int          // Percentage (0-100)
  project      Project      @relation(fields: [projectId], references: [id])
  employee     Employee?    @relation(fields: [employeeId], references: [id])

  @@index([name])
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  passwordHash String
  salt         String
  lastLogin    DateTime?
  isActive     Boolean @default(true)
  role         Role
  employeeId   String  @unique
  employee     Employee @relation(fields: [employeeId], references: [id])
}

enum Role {
  Head
  Manager
  TeamLead
  Employee
  Admin
}

enum ProjectStatus {
  Pending
  Ongoing
  Completed
  Cancelled
}

enum TaskStatus {
  NotStarted
  InProgress
  Completed
  Blocked
}
